/**************************************************************************
 * Test intermédiaire 1 - groupe jour
 * @author: Dagier Thomas
 *
 * ~ Travail individuel (30% de la note finale) ~
 *
 * Remarques
 * Un oral viendra probablement valider votre note finale
 *
 * Avertissement
 * La fraude, participation ou la tentative de fraude, de même que le 
 * plagiat peut entraîner l'échec du module et peut faire l'objet de 
 * sanctions disciplinaires.
 *
 * Consignes importantes (= pénalités importantes)
 * 1. restez connecté sur Discord durant toute la durée du test
 * 2. indiquez votre nom suivi de votre prénom à la troisième ligne
 * 3. répondez directement sur ce document
 * 4. réalisez le maximum de commit 
 *   - environ un commit par fonctionnalité. Minimum de 3-4 commits par
 *     exercice.
 * 5. déposez ce document dans votre repo poo2020exercices/test1/Test1a.txt
 *   - dès que ce document y est déposé, réalisé votre premier commit/push
 *     et vérifiez rapidement le succès de l'opération.
 *   - votre dernier commit doit s'appeler "version finale"
 * ************************************************************************/







/* ************************************************************************
 * Ex 1 - (15 pts)
 * La classe `Smurf` comporte plusieurs petites erreurs ou mauvaises
 * pratiques (env. cinq)
 * 1. corrigez-les 
 * 2. complétez ensuite le code pour que l'extrait ci-dessous puisse
 * fonctionner correctement.
 * ************************************************************************/

// extrait -----------------------------------------------------------------
Smurf s1 = new Smurf("Schtroumpfette");
System.out.println( s1 ); // ==> affiche: Smurf@4b9af9a9
                          // TODO: devrait affichier: Smurf(SCHTROUMPFETTE)
Smurf s2 = new Smurf("Grognon");
List<Smurf> smurfs = List.of(s1, s2);
smurfs.contains( new Smurf("Grognon") ); // ==> false !!!
                                         // TODO: aurait du retourner true
// -------------------------------------------------------------------------


// à compléter -------------------------------------------------------------
public class Smurf {
    private String name;
    private List<Smurf> friends = new ArrayList<>();

    public Smurf(String name) {
        this.name = name;
    }

    public void addFriend(Smurf friend) {
        this.friends.add(friend);
    }

    public int nbFriends() {
        friends.size();
    }

    @Override
    public String toString(){
        String res = (this.name).toUpper();
        return "Smurf(" + res + ")";
    }

}
// -------------------------------------------------------------------------



/* ************************************************************************
 * Ex 2 - (10 pts)
 * Nous souhaitons réaliser un jeu où différent types de personnage 
 * (appelé Agent) coopèrent pour réaliser des tâches.
 * Deux interfaces sont à compléter. Nous souhaitons réduire la duplication
 * du code en réalisant les méthodes par défaut.
 * Ne complétez donc que celles-ci !
 * ************************************************************************/


// à compléter -------------------------------------------------------------
interface Agent {

    boolean isWorking();

    // un agent dort lorsqu'il ne travaille pas
    default boolean isSleeping() {
        return !this.isWorking();
    }

    /* réveil un agent. 
     * Retourne une exception si l'agent est déjà en train de travailler ! */
    void wakeUp();

    // retourne le nombre de tâches que l'agent doit encore réaliser
    default int nbTasksToComplete() {
        return this.currentTasksToComplete().size();
    }

    // retourne la liste des tâches que l'agent doit encore réaliser
    List<Task> currentTasksToComplete();
}
interface AgentManager {

    // retourne tous les agents
    List<Agent> allAgents();

    // réveil tous les agents qui dorment et qui ont trois tâches ou plus à compléter
    default void wakeUpOnlySleepingAndBusyAgents() {
        List<Agent> res = this.allAgents();
        for(Agent crtAgent : res){
            if(crtAgent.nbTasksToComplete() >= 3 || crtAgent.isSleeping()){
                crtAgent.wakeUp();
            }
        }
    }
}
// -------------------------------------------------------------------------


/* ************************************************************************
 * Ex 3 - (30 pts)
 * Vous devez réaliser une structure de données qui représente le 
 * chargement d'un convoi ferroviaire. A chaque chargement, calculé en 
 * tonnage, nous cherchons un wagon qui peut contenir celui-ci. Si aucun 
 * wagon ne peut accepter le chargement, un nouveau wagon est ajouté au convoi.
 *
 * Lors de la création d'un convoi, représenter par un train, nous informons
 * la capacité maximale de chaque wagon.
 * Réalisez la classe `Train` pour que le code ci-dessous s'exécute 
 * correctement.
 *
 * N'exposez publiquement que les fonctionnalités visibles dans l'extrait 
 * du code ci-dessous. Rien de plus !!
 * En outre, inutile de redéfinir les méthodes de comparaison.
 *
 * A côté de chaque instruction, l'état du train avec ses wagons est
 * représenté à titre indicatif. 
 * Ex: Train([2,2,1]) indique que le convoi à trois wagons
 * avec des chargements respectifs de 2 tonnes, 2 tonnes et 1 tonne.
 * ************************************************************************/

// extrait -----------------------------------------------------------------
// Construit un train dont les wagons ont une capacité max de 10 tonnes
Train train = Train.withWagonCapacity(10); // Train([])

// Ajoute du chargement
train.add(3); // Train([3])
train.add(3); // Train([6])
train.add(3); // Train([9])
train.add(3); // Train([9, 3])
train.add(2); // Train([9, 5])
train.add(1); // Train([10, 5])
train.add(8); // Train([10, 5, 8])

System.out.println( train ); // affiche: Train([10, 5, 8])
int nb = train.nbWagons(); // nb = 3
int totalWeight = train.weight(); // totalWeight = 23

train.add(15); // lève une exception ! 15 est plus grand que la capacité d'un wagon (10)
// -------------------------------------------------------------------------


// à compléter -------------------------------------------------------------
public class Train {
    private List<Integer> content;
    private int capacity;

    public static Train withWagonCapacity(int capacity){
        checkPositive(capacity);
        this.capacity = capacity;
    }

    public void checkPositive(double value){
        if(value <= 0){
            throw new RuntimeException("la capacité doit être supérieure à 0");
        }
    }

    public void add(int value){
        checkPositive(value);
        for(int current : this.content){
            while(current <= this.capacity || value != 0){
                current = current + 1;
                value = value - 1;
            }
            if(value > 0){
                this.content.add(value);
            }
        }
    }

    public int nbWagons(){
        return this.content.size();
    }

    public int weight(){
        int res = 0;
        for(int current : this.content){
            res = res + current;
        }
        return current;
    }

    @Override
    public String toString(){
        return "Train(" + this.content.toString() + ")";
    }
}
// -------------------------------------------------------------------------




/* ************************************************************************
 * Ex 4 - (15 pts)
 * Réalisez le code minimaliste pour que l'extrait ci-dessous fonctionne.
 * Inutile de redéfinir les méthodes de Object (toString, equals...)
 * 
 * Une référence de type MaybeInt a deux états. Soit il contient un entier
 * et il est possible de le récupérer. Soit il ne contient rien et il
 * ne devrait donc pas être possible de récupérer une valeur.
 * ************************************************************************/



// extrait -----------------------------------------------------------------
MaybeInt m1 = new Something(1); 
MaybeInt m2 = new Nothing(); 
if (m1.exists()) { // ==> true car m1 référence quelquechose qui contient 1
    int i = m1.get(); // ==> i = 1
} else {
    System.out.println("m1 n'a aucune valeur");
}
System.out.println( m2.exists() ); // ==> affiche `false`

int j = m2.get(); // ==> lève une exception ! il n'y a rien à récupérer...
// -------------------------------------------------------------------------

// à compléter -------------------------------------------------------------
public class MaybeInt{
    private int content;
    public Something(int i){
        this.content = i;
    }

    public Nothing(){
        this.content = null;
    }

    public Boolean exists(){
        return this.content.equals(null);
    }

    public int get(){
        if(!this.exists()){
            throw new RuntimeException("il n'y a rien à récupérer");
        }
        return this.content;
    }

}




// -------------------------------------------------------------------------