/* The following code was generated by JFlex 1.7.0 */


import java_cup.runtime.*;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>monflex.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\1\13\1\13\1\13\22\0\1\14\1\0\1\3"+
    "\5\0\1\7\1\10\1\43\1\41\1\4\1\42\1\0\1\12\12\2"+
    "\1\0\1\5\1\44\1\6\1\45\2\0\32\1\6\0\1\21\1\25"+
    "\1\33\1\24\1\23\1\30\1\20\1\1\1\31\2\1\1\35\1\22"+
    "\1\32\1\17\1\15\1\36\1\16\1\34\1\27\1\26\1\37\1\1"+
    "\1\40\2\1\1\0\1\14\1\0\1\11\6\0\1\13\32\0\1\14"+
    "\u15df\0\1\14\u097f\0\13\14\35\0\1\13\1\13\5\0\1\14\57\0"+
    "\1\14\u0fa0\0\1\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\1\1\13\12\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\12\2\1"+
    "\1\23\1\1\1\24\11\1\1\25\2\1\1\26\1\27"+
    "\1\30\14\1\1\31\5\1\1\32\7\1\1\33\6\1"+
    "\1\34\1\35\1\1\1\36\6\1\1\37\3\1\1\40"+
    "\1\1\1\41\2\1\1\42\1\43\3\1\1\44\6\1"+
    "\1\45\1\46\1\47\3\1\1\50\1\51\2\1\1\52"+
    "\1\1\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\230\0\276\0\230"+
    "\0\230\0\230\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2"+
    "\0\u01c8\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2"+
    "\0\u02f8\0\230\0\230\0\230\0\u031e\0\u0344\0\u036a\0\230"+
    "\0\u0390\0\u03b6\0\u03dc\0\46\0\u0402\0\46\0\u0428\0\u044e"+
    "\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e"+
    "\0\u05a4\0\u05ca\0\230\0\230\0\230\0\u05f0\0\u0616\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c"+
    "\0\u0792\0\46\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\46"+
    "\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\46"+
    "\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\46\0\46"+
    "\0\u0a64\0\46\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\46\0\u0b6e\0\u0b94\0\u0bba\0\46\0\u0be0\0\46\0\u0c06"+
    "\0\u0c2c\0\46\0\46\0\u0c52\0\u0c78\0\u0c9e\0\46\0\u0cc4"+
    "\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\46\0\46\0\46"+
    "\0\u0da8\0\u0dce\0\u0df4\0\46\0\46\0\u0e1a\0\u0e40\0\46"+
    "\0\u0e66\0\46\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\2\14\1\15\1\2\1\16\1\2"+
    "\1\17\1\2\1\20\1\21\1\22\1\2\1\23\1\24"+
    "\1\2\1\25\1\26\1\27\1\30\1\2\1\31\1\2"+
    "\1\32\1\33\1\34\1\35\1\36\1\0\2\2\12\0"+
    "\24\2\7\0\1\3\43\0\3\4\1\37\42\4\54\0"+
    "\1\40\51\0\1\41\46\0\2\14\32\0\2\2\12\0"+
    "\1\2\1\42\1\43\21\2\6\0\2\2\12\0\11\2"+
    "\1\44\12\2\6\0\2\2\12\0\20\2\1\45\3\2"+
    "\6\0\2\2\12\0\12\2\1\46\2\2\1\47\1\50"+
    "\5\2\6\0\2\2\12\0\6\2\1\51\15\2\6\0"+
    "\2\2\12\0\2\2\1\52\21\2\6\0\2\2\12\0"+
    "\4\2\1\53\17\2\6\0\2\2\12\0\4\2\1\54"+
    "\7\2\1\55\7\2\6\0\2\2\12\0\2\2\1\56"+
    "\21\2\6\0\2\2\12\0\2\2\1\57\21\2\6\0"+
    "\2\2\12\0\14\2\1\60\7\2\6\0\2\2\12\0"+
    "\14\2\1\61\7\2\6\0\2\2\12\0\1\2\1\62"+
    "\22\2\13\0\1\63\36\0\1\64\6\0\1\65\42\0"+
    "\1\4\42\0\13\41\1\0\32\41\1\0\2\2\12\0"+
    "\2\2\1\66\21\2\6\0\2\2\12\0\11\2\1\67"+
    "\12\2\6\0\2\2\12\0\2\2\1\70\15\2\1\71"+
    "\3\2\6\0\2\2\12\0\12\2\1\72\11\2\6\0"+
    "\2\2\12\0\1\2\1\73\22\2\6\0\2\2\12\0"+
    "\10\2\1\74\13\2\6\0\2\2\12\0\2\2\1\75"+
    "\21\2\6\0\2\2\12\0\15\2\1\76\6\2\6\0"+
    "\2\2\12\0\11\2\1\77\2\2\1\100\7\2\6\0"+
    "\2\2\12\0\15\2\1\101\6\2\6\0\2\2\12\0"+
    "\15\2\1\102\6\2\6\0\2\2\12\0\15\2\1\103"+
    "\6\2\6\0\2\2\12\0\15\2\1\104\6\2\6\0"+
    "\2\2\12\0\1\2\1\105\22\2\6\0\2\2\12\0"+
    "\4\2\1\106\17\2\6\0\2\2\12\0\3\2\1\107"+
    "\20\2\6\0\2\2\12\0\1\2\1\110\22\2\6\0"+
    "\2\2\12\0\1\2\1\111\22\2\6\0\2\2\12\0"+
    "\4\2\1\112\17\2\6\0\2\2\12\0\14\2\1\113"+
    "\7\2\6\0\2\2\12\0\14\2\1\114\7\2\6\0"+
    "\2\2\12\0\11\2\1\115\12\2\6\0\2\2\12\0"+
    "\20\2\1\116\3\2\6\0\2\2\12\0\12\2\1\117"+
    "\11\2\6\0\2\2\12\0\23\2\1\120\6\0\2\2"+
    "\12\0\1\2\1\121\22\2\6\0\2\2\12\0\1\122"+
    "\11\2\1\123\4\2\1\124\4\2\6\0\2\2\12\0"+
    "\17\2\1\125\4\2\6\0\2\2\12\0\2\2\1\126"+
    "\21\2\6\0\2\2\12\0\6\2\1\127\15\2\6\0"+
    "\2\2\12\0\14\2\1\130\7\2\6\0\2\2\12\0"+
    "\1\2\1\131\22\2\6\0\2\2\12\0\17\2\1\132"+
    "\4\2\6\0\2\2\12\0\15\2\1\133\6\2\6\0"+
    "\2\2\12\0\6\2\1\134\15\2\6\0\2\2\12\0"+
    "\1\2\1\135\22\2\6\0\2\2\12\0\12\2\1\136"+
    "\11\2\6\0\2\2\12\0\6\2\1\137\15\2\6\0"+
    "\2\2\12\0\21\2\1\140\2\2\6\0\2\2\12\0"+
    "\6\2\1\141\15\2\6\0\2\2\12\0\1\2\1\142"+
    "\1\143\21\2\6\0\2\2\12\0\4\2\1\144\17\2"+
    "\6\0\2\2\12\0\14\2\1\145\7\2\6\0\2\2"+
    "\12\0\12\2\1\146\11\2\6\0\2\2\12\0\15\2"+
    "\1\147\6\2\6\0\2\2\12\0\4\2\1\150\17\2"+
    "\6\0\2\2\12\0\12\2\1\151\11\2\6\0\2\2"+
    "\12\0\1\2\1\152\22\2\6\0\2\2\12\0\6\2"+
    "\1\153\15\2\6\0\2\2\12\0\1\154\23\2\6\0"+
    "\2\2\12\0\6\2\1\155\15\2\6\0\2\2\12\0"+
    "\11\2\1\156\12\2\6\0\2\2\12\0\3\2\1\157"+
    "\20\2\6\0\2\2\12\0\11\2\1\160\12\2\6\0"+
    "\2\2\12\0\15\2\1\161\6\2\6\0\2\2\12\0"+
    "\4\2\1\162\17\2\6\0\2\2\12\0\5\2\1\163"+
    "\16\2\6\0\2\2\12\0\7\2\1\164\14\2\6\0"+
    "\2\2\12\0\1\2\1\165\22\2\6\0\2\2\12\0"+
    "\15\2\1\166\6\2\6\0\2\2\12\0\6\2\1\167"+
    "\15\2\6\0\2\2\12\0\1\2\1\170\22\2\6\0"+
    "\2\2\12\0\12\2\1\171\11\2\6\0\2\2\12\0"+
    "\15\2\1\172\6\2\6\0\2\2\12\0\5\2\1\173"+
    "\16\2\6\0\2\2\12\0\6\2\1\174\15\2\6\0"+
    "\2\2\12\0\3\2\1\175\20\2\6\0\2\2\12\0"+
    "\21\2\1\176\2\2\6\0\2\2\12\0\12\2\1\177"+
    "\11\2\6\0\2\2\12\0\6\2\1\200\15\2\6\0"+
    "\2\2\12\0\11\2\1\201\12\2\6\0\2\2\12\0"+
    "\6\2\1\202\15\2\6\0\2\2\12\0\6\2\1\203"+
    "\15\2\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3724];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\2\11\1\1\3\11\17\1\3\11"+
    "\3\1\1\11\22\1\3\11\116\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

// Print parsing errors
public void yyerror() {
       System.out.println("error line " +yyline + " column " +yycolumn + " " +yytext());
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.IDENT, yyline, yycolumn, yytext());
            } 
            // fall through
          case 45: break;
          case 2: 
            { return new Symbol(sym.INTEGERCONST, yyline, yycolumn, Integer.parseInt(yytext()));
            } 
            // fall through
          case 46: break;
          case 3: 
            { return new Symbol(sym.COMMA, yyline, yycolumn);
            } 
            // fall through
          case 47: break;
          case 4: 
            { return new Symbol(sym.SEMICOLON, yyline, yycolumn);
            } 
            // fall through
          case 48: break;
          case 5: 
            { return new Symbol(sym.EQUAL, yyline, yycolumn);
            } 
            // fall through
          case 49: break;
          case 6: 
            { return new Symbol(sym.OPENPARENT, yyline, yycolumn);
            } 
            // fall through
          case 50: break;
          case 7: 
            { return new Symbol(sym.CLOSEPARENT, yyline, yycolumn);
            } 
            // fall through
          case 51: break;
          case 8: 
            { return new Symbol(sym.TILDA, yyline, yycolumn);
            } 
            // fall through
          case 52: break;
          case 9: 
            { return new Symbol(sym.DIVIDE, yyline, yycolumn);
            } 
            // fall through
          case 53: break;
          case 10: 
            { ;
            } 
            // fall through
          case 54: break;
          case 11: 
            { return new Symbol(sym.TO, yyline, yycolumn);
            } 
            // fall through
          case 55: break;
          case 12: 
            { return new Symbol(sym.PLUS, yyline, yycolumn);
            } 
            // fall through
          case 56: break;
          case 13: 
            { return new Symbol(sym.MINUS, yyline, yycolumn);
            } 
            // fall through
          case 57: break;
          case 14: 
            { return new Symbol(sym.TIMES, yyline, yycolumn);
            } 
            // fall through
          case 58: break;
          case 15: 
            { return new Symbol(sym.INF, yyline, yycolumn);
            } 
            // fall through
          case 59: break;
          case 16: 
            { return new Symbol(sym.SUP, yyline, yycolumn);
            } 
            // fall through
          case 60: break;
          case 17: 
            { return new Symbol(sym.STRINGCONST, yyline, yycolumn, yytext());
            } 
            // fall through
          case 61: break;
          case 18: 
            { return new Symbol(sym.EQUALS, yyline, yycolumn);
            } 
            // fall through
          case 62: break;
          case 19: 
            { return new Symbol(sym.OR, yyline, yycolumn);
            } 
            // fall through
          case 63: break;
          case 20: 
            { return new Symbol(sym.AND, yyline, yycolumn);
            } 
            // fall through
          case 64: break;
          case 21: 
            { return new Symbol(sym.IF, yyline, yycolumn);
            } 
            // fall through
          case 65: break;
          case 22: 
            { return new Symbol(sym.INFEQUAL, yyline, yycolumn);
            } 
            // fall through
          case 66: break;
          case 23: 
            { return new Symbol(sym.DIFF, yyline, yycolumn);
            } 
            // fall through
          case 67: break;
          case 24: 
            { return new Symbol(sym.SUPEQUAL, yyline, yycolumn);
            } 
            // fall through
          case 68: break;
          case 25: 
            { return new Symbol(sym.NOT, yyline, yycolumn);
            } 
            // fall through
          case 69: break;
          case 26: 
            { return new Symbol(sym.FOR, yyline, yycolumn);
            } 
            // fall through
          case 70: break;
          case 27: 
            { return new Symbol(sym.FALSE, yyline, yycolumn);
            } 
            // fall through
          case 71: break;
          case 28: 
            { return new Symbol(sym.READ, yyline, yycolumn);
            } 
            // fall through
          case 72: break;
          case 29: 
            { return new Symbol(sym.TRUE, yyline, yycolumn);
            } 
            // fall through
          case 73: break;
          case 30: 
            { return new Symbol(sym.THEN, yyline, yycolumn);
            } 
            // fall through
          case 74: break;
          case 31: 
            { return new Symbol(sym.DO, yyline, yycolumn);
            } 
            // fall through
          case 75: break;
          case 32: 
            { return new Symbol(sym.ENDIF, yyline, yycolumn);
            } 
            // fall through
          case 76: break;
          case 33: 
            { return new Symbol(sym.ELSE, yyline, yycolumn);
            } 
            // fall through
          case 77: break;
          case 34: 
            { return new Symbol(sym.TINTEGER, yyline, yycolumn);
            } 
            // fall through
          case 78: break;
          case 35: 
            { return new Symbol(sym.WRITE, yyline, yycolumn);
            } 
            // fall through
          case 79: break;
          case 36: 
            { return new Symbol(sym.ENDPRG, yyline, yycolumn);
            } 
            // fall through
          case 80: break;
          case 37: 
            { return new Symbol(sym.TBOOLEAN, yyline, yycolumn);
            } 
            // fall through
          case 81: break;
          case 38: 
            { return new Symbol(sym.WHILE, yyline, yycolumn);
            } 
            // fall through
          case 82: break;
          case 39: 
            { return new Symbol(sym.ENDFOR, yyline, yycolumn);
            } 
            // fall through
          case 83: break;
          case 40: 
            { return new Symbol(sym.FROM, yyline, yycolumn);
            } 
            // fall through
          case 84: break;
          case 41: 
            { return new Symbol(sym.STARTPRG, yyline, yycolumn);
            } 
            // fall through
          case 85: break;
          case 42: 
            { return new Symbol(sym.PRG, yyline, yycolumn);
            } 
            // fall through
          case 86: break;
          case 43: 
            { return new Symbol(sym.CONSTANT, yyline, yycolumn);
            } 
            // fall through
          case 87: break;
          case 44: 
            { return new Symbol(sym.ENDWHILE, yyline, yycolumn);
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
