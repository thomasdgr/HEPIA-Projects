
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 27 14:00:42 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 27 14:00:42 CET 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\004\003\000\002\007\002\000\002\007\004" +
    "\000\002\010\003\000\002\010\003\000\002\011\005\000" +
    "\002\027\003\000\002\027\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\012\010\000\002\013" +
    "\005\000\002\013\005\000\002\013\004\000\002\013\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\014\003\000\002\005\003\000\002\006" +
    "\002\000\002\006\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\024\006\000\002\021\005\000\002" +
    "\021\005\000\002\022\005\000\002\020\011\000\002\020" +
    "\007\000\002\017\007\000\002\016\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\004\005\001\002\000\004\002\146\001" +
    "\002\000\004\051\145\001\002\000\012\005\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\001\002\000\012\005\ufffe\053\123\054" +
    "\132\055\126\001\002\000\004\005\011\001\002\000\020" +
    "\006\uffd8\014\uffd8\015\uffd8\016\uffd8\022\uffd8\025\uffd8\051" +
    "\uffd8\001\002\000\004\006\122\001\002\000\030\006\uffd9" +
    "\014\014\015\025\016\024\020\uffd9\021\uffd9\022\015\024" +
    "\uffd9\025\017\030\uffd9\051\016\001\002\000\004\051\120" +
    "\001\002\000\024\010\043\031\036\032\042\033\037\034" +
    "\032\047\044\050\045\051\016\056\035\001\002\000\046" +
    "\007\uffda\011\uffda\013\uffda\017\uffda\023\uffda\027\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\001\002\000" +
    "\004\051\104\001\002\000\030\006\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3\030" +
    "\uffd3\051\uffd3\001\002\000\030\006\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\030" +
    "\uffd4\051\uffd4\001\002\000\004\013\101\001\002\000\030" +
    "\006\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\024\uffd2\025\uffd2\030\uffd2\051\uffd2\001\002\000\024" +
    "\010\043\031\036\032\042\033\037\034\032\047\044\050" +
    "\045\051\016\056\035\001\002\000\026\010\043\031\036" +
    "\032\042\033\037\034\032\047\044\050\045\051\016\052" +
    "\033\056\035\001\002\000\030\006\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\030" +
    "\uffd7\051\uffd7\001\002\000\030\006\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\025\uffd5\030" +
    "\uffd5\051\uffd5\001\002\000\030\006\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025\uffd1\030" +
    "\uffd1\051\uffd1\001\002\000\030\006\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6\030" +
    "\uffd6\051\uffd6\001\002\000\024\010\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\047\uffdf\050\uffdf\051\uffdf\056\uffdf\001" +
    "\002\000\004\007\071\001\002\000\044\007\uffde\011\uffde" +
    "\017\uffde\023\uffde\027\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\001\002\000\044\007\uffdd\011\uffdd\017" +
    "\uffdd\023\uffdd\027\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\001\002\000\044\007\uffdc\011\uffdc\017\uffdc" +
    "\023\uffdc\027\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\001\002\000\024\010\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\047\uffe0\050\uffe0\051\uffe0\056\uffe0\001\002" +
    "\000\024\010\043\031\036\032\042\033\037\034\032\047" +
    "\044\050\045\051\016\056\035\001\002\000\044\007\uffef" +
    "\011\uffef\017\uffef\023\uffef\027\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\001\002\000\044\007\uffdb\011" +
    "\uffdb\017\uffdb\023\uffdb\027\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\001\002\000\024\010\043\031\036" +
    "\032\042\033\037\034\032\047\044\050\045\051\016\056" +
    "\035\001\002\000\024\010\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\047\uffe2\050\uffe2\051\uffe2\056\uffe2\001\002\000" +
    "\024\010\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\056\uffe1\001\002\000\034\007\060\033" +
    "\054\034\050\035\061\036\052\037\062\040\057\041\056" +
    "\042\051\043\064\044\053\045\047\046\063\001\002\000" +
    "\024\010\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\056\uffe4\001\002\000\024\010\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\047\uffed\050\uffed\051\uffed" +
    "\056\uffed\001\002\000\024\010\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\047\uffe6\050\uffe6\051\uffe6\056\uffe6\001\002" +
    "\000\024\010\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\056\uffeb\001\002\000\024\010\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\056\uffe5\001\002\000\024\010\uffee\031\uffee\032\uffee" +
    "\033\uffee\034\uffee\047\uffee\050\uffee\051\uffee\056\uffee\001" +
    "\002\000\024\010\043\031\036\032\042\033\037\034\032" +
    "\047\044\050\045\051\016\056\035\001\002\000\024\010" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\056\uffe8\001\002\000\024\010\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\047\uffe9\050\uffe9\051\uffe9\056\uffe9" +
    "\001\002\000\030\006\uffcf\014\uffcf\015\uffcf\016\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\030\uffcf\051\uffcf" +
    "\001\002\000\024\010\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\047\uffec\050\uffec\051\uffec\056\uffec\001\002\000\024" +
    "\010\uffea\031\uffea\032\uffea\033\uffea\034\uffea\047\uffea\050" +
    "\uffea\051\uffea\056\uffea\001\002\000\024\010\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\047\uffe3\050\uffe3\051\uffe3\056" +
    "\uffe3\001\002\000\024\010\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\047\uffe7\050\uffe7\051\uffe7\056\uffe7\001\002\000" +
    "\044\007\ufff2\011\ufff2\017\ufff2\023\ufff2\027\ufff2\033\054" +
    "\034\050\035\061\036\052\037\062\040\057\041\056\042" +
    "\051\043\064\044\053\045\047\046\063\001\002\000\034" +
    "\011\067\033\054\034\050\035\061\036\052\037\062\040" +
    "\057\041\056\042\051\043\064\044\053\045\047\046\063" +
    "\001\002\000\044\007\ufff1\011\ufff1\017\ufff1\023\ufff1\027" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\001" +
    "\002\000\044\007\ufff0\011\ufff0\017\ufff0\023\ufff0\027\ufff0" +
    "\033\054\034\050\035\061\036\052\037\062\040\057\041" +
    "\056\042\051\043\064\044\053\045\047\046\063\001\002" +
    "\000\030\006\uffce\014\uffce\015\uffce\016\uffce\020\uffce\021" +
    "\uffce\022\uffce\024\uffce\025\uffce\030\uffce\051\uffce\001\002" +
    "\000\034\017\073\033\054\034\050\035\061\036\052\037" +
    "\062\040\057\041\056\042\051\043\064\044\053\045\047" +
    "\046\063\001\002\000\022\014\uffd8\015\uffd8\016\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\025\uffd8\051\uffd8\001\002\000\006" +
    "\020\075\021\076\001\002\000\020\014\uffd8\015\uffd8\016" +
    "\uffd8\021\uffd8\022\uffd8\025\uffd8\051\uffd8\001\002\000\030" +
    "\006\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\024\uffcb\025\uffcb\030\uffcb\051\uffcb\001\002\000\004" +
    "\021\100\001\002\000\030\006\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc\030\uffcc" +
    "\051\uffcc\001\002\000\024\010\043\031\036\032\042\033" +
    "\037\034\032\047\044\050\045\051\016\056\035\001\002" +
    "\000\034\007\103\033\054\034\050\035\061\036\052\037" +
    "\062\040\057\041\056\042\051\043\064\044\053\045\047" +
    "\046\063\001\002\000\030\006\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0\030\uffd0" +
    "\051\uffd0\001\002\000\004\026\105\001\002\000\024\010" +
    "\043\031\036\032\042\033\037\034\032\047\044\050\045" +
    "\051\016\056\035\001\002\000\034\027\107\033\054\034" +
    "\050\035\061\036\052\037\062\040\057\041\056\042\051" +
    "\043\064\044\053\045\047\046\063\001\002\000\024\010" +
    "\043\031\036\032\042\033\037\034\032\047\044\050\045" +
    "\051\016\056\035\001\002\000\034\023\111\033\054\034" +
    "\050\035\061\036\052\037\062\040\057\041\056\042\051" +
    "\043\064\044\053\045\047\046\063\001\002\000\020\014" +
    "\uffd8\015\uffd8\016\uffd8\022\uffd8\025\uffd8\030\uffd8\051\uffd8" +
    "\001\002\000\004\030\113\001\002\000\030\006\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9" +
    "\025\uffc9\030\uffc9\051\uffc9\001\002\000\034\023\115\033" +
    "\054\034\050\035\061\036\052\037\062\040\057\041\056" +
    "\042\051\043\064\044\053\045\047\046\063\001\002\000" +
    "\020\014\uffd8\015\uffd8\016\uffd8\022\uffd8\024\uffd8\025\uffd8" +
    "\051\uffd8\001\002\000\004\024\117\001\002\000\030\006" +
    "\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022\uffca" +
    "\024\uffca\025\uffca\030\uffca\051\uffca\001\002\000\004\007" +
    "\121\001\002\000\030\006\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\030\uffcd\051" +
    "\uffcd\001\002\000\004\002\001\001\002\000\004\051\ufff5" +
    "\001\002\000\012\005\ufffa\053\ufffa\054\ufffa\055\ufffa\001" +
    "\002\000\012\005\ufffc\053\ufffc\054\ufffc\055\ufffc\001\002" +
    "\000\006\053\123\054\132\001\002\000\012\005\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\001\002\000\004\051\133\001\002" +
    "\000\004\051\ufff6\001\002\000\004\051\ufff4\001\002\000" +
    "\006\007\ufff8\012\ufff8\001\002\000\006\007\136\012\135" +
    "\001\002\000\004\051\137\001\002\000\012\005\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\001\002\000\006\007\ufff7\012\ufff7" +
    "\001\002\000\004\051\141\001\002\000\004\013\142\001" +
    "\002\000\024\010\043\031\036\032\042\033\037\034\032" +
    "\047\044\050\045\051\016\056\035\001\002\000\034\007" +
    "\144\033\054\034\050\035\061\036\052\037\062\040\057" +
    "\041\056\042\051\043\064\044\053\045\047\046\063\001" +
    "\002\000\012\005\ufff3\053\ufff3\054\ufff3\055\ufff3\001\002" +
    "\000\012\005\uffff\053\uffff\054\uffff\055\uffff\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\007\007\006\001\001" +
    "\000\014\010\124\011\126\012\123\030\127\031\130\001" +
    "\001\000\002\001\001\000\006\005\011\006\012\001\001" +
    "\000\002\001\001\000\022\014\021\016\027\017\022\020" +
    "\017\021\026\022\020\023\025\024\030\001\001\000\002" +
    "\001\001\000\012\013\113\014\033\015\040\025\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\071\014\033\015\040\025\037\001\001\000\012" +
    "\013\045\014\033\015\040\025\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\067\014\033\015\040\025\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\065\014\033\015\040" +
    "\025\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\064\014\033\015\040\025\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\054\001\001\000\004\026" +
    "\054\001\001\000\002\001\001\000\004\026\054\001\001" +
    "\000\002\001\001\000\004\026\054\001\001\000\006\005" +
    "\073\006\012\001\001\000\002\001\001\000\006\005\076" +
    "\006\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\101\014\033\015\040\025\037" +
    "\001\001\000\004\026\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\105\014\033\015\040\025\037" +
    "\001\001\000\004\026\054\001\001\000\012\013\107\014" +
    "\033\015\040\025\037\001\001\000\004\026\054\001\001" +
    "\000\006\005\111\006\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\054\001\001\000\006\005\115" +
    "\006\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\137\031\130\001\001\000\002\001\001\000\004\027\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\142\014\033\015\040\025\037\001\001\000\004" +
    "\026\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    HashMap<String, Symbole> TDS = new HashMap<>();

    public void addVarToTDS(ArrayList<Idf> i, HashMap<String, Symbole> TDS, String type){
        for(Idf crt : i){
            if(type.equals("entier")){
                TDS.put(crt.getName(), new Symbole(crt.getName(),"0",type,false));
            } else {
                TDS.put(crt.getName(), new Symbole(crt.getName(),"false",type,false));
            }
        }
    }

    public void TDStoString(HashMap<String, Symbole> TDS){
            System.out.println("Table des symboles:");
        for (String k : TDS.keySet()){
            System.out.println("\t" + TDS.get(k).toString());
        }
        System.out.println();
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_instr ::= FOR IDENT FROM expr TO expr DO body ENDFOR 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(b.getInstructions(), new Idf(id, "", idleft, idright), e1, e2, "", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_instr ::= WHILE expr DO body ENDWHILE 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(b.getInstructions(), e, "", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_instr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond_instr ::= IF expr THEN body ENDIF 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Condition(b1.getInstructions(), e, "", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_instr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cond_instr ::= IF expr THEN body ELSE body ENDIF 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Condition(b2.getInstructions(), b1.getInstructions(), e, "", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_instr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // read_instr ::= READ IDENT SEMICOLON 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Read(new Idf(i, "", ileft, iright) ,"", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_instr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // write_instr ::= WRITE STRINGCONST SEMICOLON 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Write(s, "", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_instr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // write_instr ::= WRITE expr SEMICOLON 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Write(e, "", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_instr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign ::= access EQUAL expr SEMICOLON 
            {
              Assignment RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression dest = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression src = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(dest, src, "", eleft, eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instr ::= for_instr 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction o = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instr ::= while_instr 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction o = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instr ::= cond_instr 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction o = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instr ::= read_instr 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction o = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instr ::= write_instr 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction o = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instr ::= assign 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment o = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instr_lst ::= instr_lst instr 
            {
              ArrayList<Instruction> RESULT =null;
		int instructionListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instructionListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruction> instructionList = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instructionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instructionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Instruction> instructions = new ArrayList<Instruction>(instructionList); instructions.add(instruction); RESULT = instructions; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr_lst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instr_lst ::= 
            {
              ArrayList<Instruction> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr_lst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // body ::= instr_lst 
            {
              Block RESULT =null;
		int instructionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instructionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruction> instructions = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(instructions, "", instructionsleft, instructionsright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // access ::= IDENT 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Idf(id, "", idleft, idright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("access",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operand ::= FALSE 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operand ::= TRUE 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operand ::= INTEGERCONST 
            {
              Expression RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int ib = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Number(ib, "", ibleft, ibright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operand ::= access 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression o = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op_una ::= MINUS 
            {
              Unary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SubUnary("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_una",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op_una ::= PLUS 
            {
              Unary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddUnary("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_una",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op_una ::= NOT 
            {
              Unary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not("", oleft, oright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_una",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_una ::= TILDA 
            {
              Unary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tilda("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_una",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_bin ::= OR 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_bin ::= AND 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_bin ::= SUPEQUAL 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SupEqual("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op_bin ::= INFEQUAL 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InfEqual("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op_bin ::= SUP 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Superior("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_bin ::= INF 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Inferior("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_bin ::= DIFF 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Different("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_bin ::= EQUALS 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equal("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_bin ::= DIVIDE 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op_bin ::= TIMES 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mult("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op_bin ::= MINUS 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sub("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op_bin ::= PLUS 
            {
              Binary RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Addition("", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= operand 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression o = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= op_una expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Unary o = (Unary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 o.setOperande(e); RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= OPENPARENT expr CLOSEPARENT 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Parenthesis(e, "", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr op_bin expr 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binary op = (Binary)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 op.setLeft(left); op.setRight(right); RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declar_const ::= CONSTANT type IDENT EQUAL expr SEMICOLON 
            {
              DeclarConst RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String o2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int o3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int o4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression o4 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarConst(o, o1, new Idf( o2, "", o2left, o2right), o4, "", o3left, o3right); TDS.put(o2, new Symbole(o2,o4.toString(),o1,true));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // typebase ::= TBOOLEAN 
            {
              String RESULT =null;
		 RESULT = "booleen"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typebase",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // typebase ::= TINTEGER 
            {
              String RESULT =null;
		 RESULT = "entier"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typebase",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= typebase 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // l_ident ::= l_ident COMMA IDENT 
            {
              ArrayList<Idf> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Idf> i = (ArrayList<Idf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.add(new Idf( o, "", oleft, oright)); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ident",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // l_ident ::= IDENT 
            {
              ArrayList<Idf> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Idf> tmp = new ArrayList(); tmp.add( new Idf( o, "", oleft, oright) ); RESULT = tmp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_ident",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declar_var ::= type l_ident SEMICOLON 
            {
              DeclarVar RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Idf> i = (ArrayList<Idf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarVar(o, i, "", eleft, eright); addVarToTDS(i,TDS, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declar ::= declar_const 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarConst o = (DeclarConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declar ::= declar_var 
            {
              Instruction RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarVar o = (DeclarVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declars ::= declars declar 
            {
              ArrayList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruction> a = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declars ::= 
            {
              ArrayList<Instruction> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declar_lst ::= declars 
            {
              Block RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruction> o = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(o, "", oleft, oright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar_lst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= PRG IDENT 
            {
              ProgramDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramDeclaration(new Idf(id, "", idleft, idright), "", idleft, idright, TDS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramDeclaration start_val = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= header declar_lst STARTPRG body ENDPRG 
            {
              ProgramDeclaration RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ProgramDeclaration p = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block i = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 p.setInstructions(i); p.setDeclarations(d); RESULT = p; /*TDStoString(TDS); System.out.println(p.toString());*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

